# Caminho: distributed-task-management/docker-compose.yml

version: '3.8'

services:
  # --- Database Service ---
  postgres:
    image: postgres:13-alpine
    container_name: dtm-postgres
    environment:
      POSTGRES_DB: dtm_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d dtm_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --- Message Broker Service ---
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: dtm-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --- Application Services ---
  registration-service:
    build:
      context: ./services/registration-service
      dockerfile: Dockerfile
    container_name: dtm-registration-service
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/dtm_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      JWT_SECRET: yourStrongJwtSecretKeyThatIsAtLeast256BitsLongForHS256
      JWT_EXPIRATION: 86400000
    depends_on:
      postgres:
        condition: service_healthy

  middleware-service:
    build:
      context: ./services/middleware-service
      dockerfile: Dockerfile
    container_name: dtm-middleware-service
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/dtm_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
      JWT_SECRET: yourStrongJwtSecretKeyThatIsAtLeast256BitsLongForHS256
      JWT_EXPIRATION: 86400000
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  discovery-service:
    build:
      context: ./services/discovery-service
      dockerfile: Dockerfile
    container_name: dtm-discovery-service
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/dtm_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
      JWT_SECRET: yourStrongJwtSecretKeyThatIsAtLeast256BitsLongForHS256
      JWT_EXPIRATION: 86400000
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # --- NOVO SERVIÇO ADAPTADOR ---
  # ADICIONE ESTE BLOCO INTEIRO AO SEU ARQUIVO
  interscity-adapter-service:
    build:
      context: ./services/interscity-adapter-service # Aponta para a pasta do novo serviço
      dockerfile: Dockerfile
    container_name: dtm-interscity-adapter
    ports:
      - "8083:8083" # Expõe a nova porta que definimos (8083)
    environment:
      # Configuração para conectar ao RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
      # Variável de ambiente com a URL da API do InterSCity
      INTERSCITY_API_URL: https://cidadesinteligentes.lsdi.ufma.br/interscity_lh

    depends_on:
      rabbitmq:
        condition: service_healthy # Garante que o RabbitMQ esteja pronto antes de iniciar

volumes:
  postgres_data: