# Caminho: distributed-task-management/docker-compose.yml

version: '3.8'

services:
  # --- Database Service ---
  postgres:
    image: postgres:13-alpine # Ou mysql:8 para MySQL
    container_name: dtm-postgres
    environment:
      POSTGRES_DB: dtm_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      # Para MySQL:
      # MYSQL_ROOT_PASSWORD: password
      # MYSQL_DATABASE: dtm_db
      # MYSQL_USER: user
      # MYSQL_PASSWORD: password
    ports:
      - "5432:5432" # Para PostgreSQL
      # - "3306:3306" # Para MySQL
    volumes:
      - postgres_data:/var/lib/postgresql/data # Volume persistente para dados
      # - mysql_data:/var/lib/mysql # Para MySQL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d dtm_db"] # Para PostgreSQL
      # test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppassword"] # Para MySQL
      interval: 5s
      timeout: 5s
      retries: 5

  # --- Message Broker Service ---
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: dtm-rabbitmq
    ports:
      - "5672:5672" # Porta padrão do AMQP
      - "15672:15672" # Porta da interface de gerenciamento (Web UI)
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --- Application Services ---
  registration-service:
    build:
      context: ./services/registration-service # Caminho para o Dockerfile do serviço
      dockerfile: Dockerfile
    container_name: dtm-registration-service
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/dtm_db
      # Para MySQL: SPRING_DATASOURCE_URL: jdbc:mysql://postgres:3306/dtm_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update # create, update, validate
      JWT_SECRET: yourStrongJwtSecretKeyThatIsAtLeast256BitsLongForHS256
      JWT_EXPIRATION: 3600000 # 1 hour in milliseconds
    depends_on:
      postgres:
        condition: service_healthy # Garante que o DB esteja pronto

  middleware-service:
    build:
      context: ./services/middleware-service
      dockerfile: Dockerfile
    container_name: dtm-middleware-service
    ports:
      - "8081:8081" # Porta diferente para evitar conflito com registration-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/dtm_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      RABBITMQ_HOST: rabbitmq # Nome do serviço RabbitMQ no Docker Compose
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
      JWT_SECRET: yourStrongJwtSecretKeyThatIsAtLeast256BitsLongForHS256
      JWT_EXPIRATION: 3600000
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  discovery-service:
    build:
      context: ./services/discovery-service
      dockerfile: Dockerfile
    container_name: dtm-discovery-service
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/dtm_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
      JWT_SECRET: yourStrongJwtSecretKeyThatIsAtLeast256BitsLongForHS256
      JWT_EXPIRATION: 3600000
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

volumes:
  postgres_data:
  # mysql_data:
